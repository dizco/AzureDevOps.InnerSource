name: '1.1$(rev:.r)'

trigger:
- master

pr:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: WorkingDirectory
  value: '$(Build.SourcesDirectory)/extension'

stages:
- stage: Build
  jobs:
  - job: Build
    steps: 
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
      displayName: 'npm install'
      workingDirectory: $(WorkingDirectory)

    - script: |
        npm run build
      displayName: 'npm run build'
      workingDirectory: $(WorkingDirectory)

    - script: |
        npm run test
      displayName: 'npm run test'
      workingDirectory: $(WorkingDirectory)

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(WorkingDirectory)/**/test-results.xml'
      condition: succeededOrFailed()

    - script: >
        npm run package-extension --
        --rev-version
        --output-path '$(Build.ArtifactStagingDirectory)/azuredevops-innersource.vsix'
        --json --no-color --no-prompt
      displayName: 'npm run package-extension'
      workingDirectory: $(WorkingDirectory)

    - task: PublishPipelineArtifact@1
      displayName: 'Publish vsix'
      inputs:
        publishLocation: pipeline
        targetPath: '$(Build.ArtifactStagingDirectory)/azuredevops-innersource.vsix'
        artifact: 'vsix'
      condition: succeededOrFailed()

- stage: PublishDev
  displayName: 'Publish privately'
  #condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # TODO: Set condition to not deploy on PRs
  dependsOn: 'Build'
  jobs:
    - deployment: 
      environment: AzureDevOps Extension GabrielBourgault Private
      strategy: 
        runOnce:
         deploy:
          steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'

          - task: TfxInstaller@3
            displayName: 'Use Node CLI for Azure DevOps'
            inputs:
              version: '0.x'
              checkLatest: true

          - task: PublishAzureDevOpsExtension@4
            name: 'publishDev'
            inputs:
              connectTo: 'VsTeam'
              connectedServiceName: 'gabrielbourgault-marketplace'
              fileType: 'vsix'
              vsixFile: '$(Pipeline.Workspace)/vsix/azuredevops-innersource.vsix'
              publisherId: 'gabrielbourgault'
              extensionId: 'azuredevops-innersource'
              extensionTag: '-dev'
              extensionName: 'AzureDevOps InnerSource Dev'
              extensionVersion: '$(Build.BuildNumber)'
              updateTasksVersion: true
              updateTasksVersionType: patch
              extensionVisibility: 'privatepreview'
              shareWith: 'gabrielbourgault' # TODO: Set gabrielbourgault-dev?
              noWaitValidation: true

          - task: IsAzureDevOpsExtensionValid@4
            inputs:
              connectTo: 'VsTeam'
              connectedServiceName: 'gabrielbourgault-marketplace'
              method: 'vsix'
              vsixFile: '$(publishDev.Extension.OutputPath)'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish vsix'
            inputs:
              publishLocation: pipeline
              targetPath: '$(publishDev.Extension.OutputPath)'
              artifact: 'dev'
            condition: succeededOrFailed()

- stage: PublishProd
  displayName: 'Publish publicly'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: 'PublishDev'
  jobs:
    - deployment: 
      environment: AzureDevOps Extension GabrielBourgault Public
      strategy: 
        runOnce:
         deploy:
          steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'
            
          - task: TfxInstaller@3
            displayName: 'Use Node CLI for Azure DevOps'
            inputs:
              version: '0.x'
              checkLatest: true

          - task: PublishAzureDevOpsExtension@4
            name: 'publishProd'
            inputs:
              connectTo: 'VsTeam'
              connectedServiceName: 'gabrielbourgault-marketplace'
              fileType: 'vsix'
              vsixFile: '$(Pipeline.Workspace)/vsix/azuredevops-innersource.vsix'
              publisherId: 'gabrielbourgault'
              extensionId: 'azuredevops-innersource'
              updateTasksVersion: false
              #extensionVisibility: 'public' # TODO: Set public
              extensionVisibility: 'privatepreview'
              shareWith: 'gabrielbourgault'
              noWaitValidation:  true
          
          - task: IsAzureDevOpsExtensionValid@4
            inputs:
              connectTo: 'VsTeam'
              connectedServiceName: 'gabrielbourgault-marketplace'
              method: 'vsix'
              vsixFile: '$(publishProd.Extension.OutputPath)'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish vsix'
            inputs:
              publishLocation: pipeline
              targetPath: '$(publishProd.Extension.OutputPath)'
              artifact: 'prod'
            condition: succeededOrFailed()
